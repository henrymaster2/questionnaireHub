// pages/admin-dashboard.tsx
import { useEffect, useState } from "react";
import { motion } from "framer-motion";
import jsPDF from "jspdf";
import { useRouter } from "next/router";

type Questionnaire = {
  id: number;
  name: string;
  email: string;
  phone: string;
  projectType: string;
  description: string;
  preferredTech?: string | null;
  budget: string;
  timeline: string;
  communication?: string | null;
  backendNeeded: boolean;
  hostingDeployment: boolean;
  additionalInfo?: string | null;
  createdAt: string;
};

export default function AdminDashboard() {
  const [questionnaires, setQuestionnaires] = useState<Questionnaire[]>([]);
  const [loading, setLoading] = useState(true);
  const [menuOpen, setMenuOpen] = useState(false);
  const router = useRouter();

  useEffect(() => {
    async function fetchData() {
      try {
        const res = await fetch("/api/questionnaires/user", { credentials: "include" });
        if (!res.ok) throw new Error("Failed to fetch questionnaires");
        const data = await res.json();
        setQuestionnaires(data.questionnaires || []);
      } catch (err) {
        console.error("Error fetching questionnaires:", err);
      } finally {
        setLoading(false);
      }
    }
    fetchData();
  }, []);

  // ✅ Updated PDF generation function
  const handleDownloadPDF = (q: Questionnaire) => {
    const doc = new jsPDF();

    // Hub Name Header
    doc.setFont("Helvetica", "bold");
    doc.setFontSize(18);
    doc.setTextColor(0, 51, 102);
    doc.text("Questionnaire Hub", 105, 15, { align: "center" });

    // Title
    doc.setFontSize(14);
    doc.setTextColor(0, 0, 0);
    doc.text("Questionnaire Submission", 105, 25, { align: "center" });

    // User Info Section
    let y = 35;
    doc.setFont("Helvetica", "bold");
    doc.text("User Information", 10, y);
    y += 8;
    doc.setFont("Helvetica", "normal");
    doc.text(`ID: ${q.id}`, 10, y);
    y += 6;
    doc.text(`Name: ${q.name}`, 10, y);
    y += 6;
    doc.text(`Email: ${q.email}`, 10, y);
    y += 6;
    doc.text(`Phone: ${q.phone}`, 10, y);
    y += 6;
    doc.text(`Submitted At: ${new Date(q.createdAt).toLocaleString()}`, 10, y);

    // Project Details Section
    y += 10;
    doc.setFont("Helvetica", "bold");
    doc.text("Project Details", 10, y);
    y += 8;
    doc.setFont("Helvetica", "normal");
    doc.text(`Project Type: ${q.projectType}`, 10, y);
    y += 6;
    doc.text(`Description:`, 10, y);
    y += 6;
    doc.setFontSize(11);
    doc.text(q.description, 12, y, { maxWidth: 186 });
    y += 20;

    if (q.preferredTech) {
      doc.setFontSize(12);
      doc.text(`Preferred Tech: ${q.preferredTech}`, 10, y);
      y += 6;
    }

    doc.text(`Budget: ${q.budget}`, 10, y);
    y += 6;
    doc.text(`Timeline: ${q.timeline}`, 10, y);
    y += 6;

    if (q.communication) doc.text(`Communication: ${q.communication}`, 10, y);
    y += 6;
    doc.text(`Backend Needed: ${q.backendNeeded ? "Yes" : "No"}`, 10, y);
    y += 6;
    doc.text(`Hosting/Deployment: ${q.hostingDeployment ? "Yes" : "No"}`, 10, y);
    y += 6;

    if (q.additionalInfo) doc.text(`Additional Info: ${q.additionalInfo}`, 10, y);

    // Footer
    doc.setFontSize(10);
    doc.setTextColor(100);
    doc.text("Generated by Questionnaire Hub", 105, 290, { align: "center" });

    doc.save(`questionnaire-${q.id}.pdf`);
  };

  const goToChats = () => {
    router.push("/admin-chats");
  };

  return (
    <div className="min-h-screen bg-gray-50 text-gray-800 px-4 py-6 sm:px-6">
      <motion.header
        initial={{ y: -50, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ duration: 0.8 }}
        className="flex justify-between items-center mb-6"
      >
        <div className="relative">
          <button
            onClick={() => setMenuOpen(!menuOpen)}
            className="flex items-center gap-2 bg-blue-100 px-3 py-2 rounded-lg text-blue-800 font-semibold hover:bg-blue-200 transition"
          >
            ☰ Menu
          </button>

          {menuOpen && (
            <motion.div
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              className="absolute mt-2 w-56 bg-white rounded-lg shadow-lg border border-gray-200 z-50"
            >
              <ul className="flex flex-col text-gray-700">
                <li>
                  <button
                    onClick={() => setMenuOpen(false)}
                    className="block w-full text-left px-4 py-2 hover:bg-blue-50"
                  >
                    View Questionnaires
                  </button>
                </li>
                <li>
                  <button
                    onClick={goToChats}
                    className="block w-full text-left px-4 py-2 hover:bg-blue-50"
                  >
                    Chats
                  </button>
                </li>
                <li>
                  <button className="block w-full text-left px-4 py-2 hover:bg-red-100 text-red-600 font-semibold">
                    Logout
                  </button>
                </li>
              </ul>
            </motion.div>
          )}
        </div>

        <h1 className="text-xl font-bold text-blue-800">Admin Dashboard</h1>
      </motion.header>

      <div className="p-6 overflow-y-auto">
        <h2 className="text-2xl font-bold mb-4 text-blue-800">Questionnaires</h2>

        {loading ? (
          <p className="text-gray-600">Loading...</p>
        ) : questionnaires.length === 0 ? (
          <p className="text-gray-600">No questionnaires found.</p>
        ) : (
          <div className="space-y-4">
            {questionnaires.map((q) => (
              <div
                key={q.id}
                className="p-4 border rounded-xl bg-white shadow-md flex justify-between items-start"
              >
                <div>
                  <p className="font-semibold mb-1">{q.name}</p>
                  <p className="text-gray-700">{q.email} | {q.phone}</p>
                  <p className="text-gray-700 mt-1">Project Type: {q.projectType}</p>
                  <p className="text-gray-700 mt-1">{q.description}</p>
                  {q.preferredTech && <p className="text-gray-700 mt-1">Tech: {q.preferredTech}</p>}
                  <p className="text-gray-700 mt-1">Budget: {q.budget}</p>
                  <p className="text-gray-700 mt-1">Timeline: {q.timeline}</p>
                  {q.communication && <p className="text-gray-700 mt-1">Communication: {q.communication}</p>}
                  <p className="text-gray-700 mt-1">Backend Needed: {q.backendNeeded ? "Yes" : "No"}</p>
                  <p className="text-gray-700 mt-1">Hosting: {q.hostingDeployment ? "Yes" : "No"}</p>
                  {q.additionalInfo && <p className="text-gray-700 mt-1">Additional: {q.additionalInfo}</p>}
                </div>
                <button
                  onClick={() => handleDownloadPDF(q)}
                  className="px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded-lg ml-4"
                >
                  Download PDF
                </button>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}
